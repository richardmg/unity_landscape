Name: Biota (or Fauna, Flora)

1.
- Environment will consist of objects that are flat, but that can have several layers
    E.g a cow would have body, legs, perhaps eyes / ears as separate layers
- Each layer should ideally have a uniform thickness (like a card board)
- Objects are inclined to face the camera sideways / billboarded at a distance.
    - Static objects like trees will do this in the shader, and when billboarded, consist
        of one layer.
    - Dynamic objects should perhaps billboard from script, perhaps by walking in a 
        "natural" way so they end up posing so.

2.
- Still flat objects, but buildt up with cubes to give some depth.
    The player can draw new limbs and pieces in a pixel editor
    Or perhaps you cannot draw limbs yourself, but need to harwest
    species / plants from the world, and combine / mate them.
    The world must then consist of a rich fauna of material.

- You somehow need to catch
    a species before you can "mate" with it. And perhaps that you then can
    choose how the new children should evolve.
- Crippled versions of the species you
    have added to world will come and haunt at night.

Game v.0
---------------
- Pearly
- There is no game, only about creating a fantasy world
- The user is creating everything with pearls 2D.
- This way, the card boards get natural depth. All pearls are billboarded.
- The pearl "D editor, you choose what kind of piece you will create (head
  eye, leg, arm, tree, wall, flower, wing).
- The piece 3D editor lets you assemple all pieces freely into a creature or building
  - the species and constructions will then be added in a shared world
  on the net for everyone to explore. Perhaps the whole land you created
  can be instered somehow.

4. Flat objects with some depth (plates)
    - You are in a clearing in a forest.
    - you can take down a tree to get plates (e.g 2 per tree)
    - a tree will only contain static plates, so you can only build static constructions with them
        but freely draw / change the default plate drawing.
    - animals living in the forest can also be captures, and will give more advanced plates to
        build with (head, legs, torso, eyes etc). The further in to the forest you go, the bigger
        or more interresting animals / plants you will find.
    - beasts also live in the forest, but never comes out in the clearing (which grows bigger as
        the user harwest trees). Or, they only comes out some meters out of the clearing.
    - Make the daylight darker when entering the forrest. Creatures will have shining eyes.
    - The more trees around the user, the darker the light. The user can create new clearings in
        the forrest.
    - the beasts will try to catch your species and mutate with them into ugly twisted versions.
    - an important point will be why the user should be tempted to go out into the forrest, and
        why he would need to create species etc.

Game v.1:
--------------
    - The point is to that you play a farmer that creates a biota
            following your own imagination. It should end up
            balanced somehow, so it will evolve into humanoid
            species and animals. You start off with small organisms
            like worms and flowers.
       - The player will need to collect organisms of the same
            kind and place them inside fencing. That way they will
            start to breed. The higher the number of organisms, the
            faster the breeding rate (up till a point where too many
            will make them die out). You will need to feed
            them to make them breed, to hinder too many breeding spots
            at the same time. This also means that a you need to
            select what kind of food / nutrition an organism need
            upfront. It can be plants or animals. If too many organisms
            rely on the same food, the food will die out and will
            therefore be hard to collect. Food with many generations
            will be better for breeding than unbred types.
       - An organsim evolve through an upgrade system. An upgrade can
            be to add or remove two genes, or resize and repaint
            two existing onces.
       - When new organisms evolve, they will not be placed back into
            fencing. Instead they are spread
            out to the world again for him to collect. The old organisms
            will continue to breed inside the fencing, but they can only
            still only produce permutations with the same number of
            quads / genes as before. If you want the organism to get more
            and more genes, you will have to breed the onces that
            got an upgrade.
       - The farmer can only have a fixed amount of fencing going at
            the same time. The longer you have been playing, perhaps
            the more fencing you will get.
       - New type decendants will replace old ones, but at least two
            generations will exist at the same time. If the same
            organism is bred in two different fencing, they will
            produce two different branches. In that case, they will
            not replace each other, and in effect, the farmer can
            leave one branch as-is.
       - After an organism has passed a certain amount of generations
            (inside fencing), the player will be allowed to upgrade
            them with new quads or resize / repaint a couple of existing
            onces / exchange existing quads to something more advanced.
            The latter can e.g be exchange 4 genes into a leg, or 8
            genes into a head. An organism with legs but no head will
            move randomly without purpose. The opposite
            will also be true; having a head but no legs will make you
            look like a fancy flower.
            The size of the quads can be of a certain (small)
            size each time to not change too much on the organism. After
            the change, the organism will be spread out in the world.
        - Each gene has a hand-drawn quad in addition to some characteristics.
            It has a type (leg, head, arm etc), strength, move speed
            good-bad scale.
        - There can also be malicious permutations of the species you
            create in the forrest (but not in the clearing). So the farmer
            needs to be careful when harvesting organisms. And also
            what kind of organisms he breed.
        - Harvested / captured organisms can be ridden and controlled
            (in addition to put inside fencing).
            That way you can move faster (based on the organism), and
            also makes it meaningful to breed some attacking skills.
        - You harvest / capture an organsim by being able to ride it.
            And to ride it you need to run after it and jump onto it, or
            jump from the organims you already ride.
        - Bonus: The game is about evolution, and includes no killing.
        - Like the idea before, you create all oranisms using quads (called
            genes?).
            You can perhaps only use as many quads as the organism
            has from before, which is controlled by evolution. Some
            quads are earmarked as legs, others as head etc. This is
            what basically controlles what you can create at any point
            in time during the game. When organisms breed, random
            quads from each organism is combined into a new organism
            of the combined types (in case of hybrid organisms).
            The normal permutation ends up with the same amount of
            quads that one of the organisms had from before. But also
            sometimes more, other times less. For each quad, keep a
            count of how many generations it has survived. A long
            survival ratio will make it more inclined to be a part
            of new permutations.

       - Genes are implemented using voxel volumes, since it will just
            look better and more convincing. The main body and head
            can have a depth between 0 and e.g 10, but limbs etc can
            only have a depth between 0 and 1.
            This makes them easy to quickly
            reduce quality, since then all limbs can easily be quads
            on some distance. Worst case if fps drops, body and head
            can be reduced to quad arrays, with one quad per depth.
            The most advances organisms can have e.g up to 10 - 15
            genes. The ones you start with can e.g have 2 - 4 (flowers
            trees, etc).

            All genes can be scaled both up and down (but without
            adding more voxels). This way you can make small flowers
            and bees etc.

       - Random permutations / monsters of the organisms bred will
            be be placed in the forrest, and are likely to attack.
            permutations occur in the world. Perhaps this can be the
            monsters that you meet, which attack you.

       - Populate the forrest with small and big creatures, from beatles
            and flies and up. The user can either choose to put two
            different organsims together to let them mutate, or two
            of the the same kind to allow it to evolve (that is, the
            player can draw new genes etc). A combination could then
            be that you first mutate interresting organisms (a flower
            and a turtle). Then you go searching and harwesting a
            number of the permutations, and try to evolve / change
            them further.
       - Cool effect: In the dark, draw species using (almost) gray
            tones, but light them up (as if the moon makes them shine), to
            e.g makes the eyes shine etc.

Game v.2
---------------
    - Instead of evolution, you create an ecosystem
    - The user can draw whatever organism he wants based on blueprints (e.g all kinds of
        animals, vegation, humans, cars, etc. Perhaps I can come up with a
        way to let the user create his own blueprints later, or perhaps combine
        them, like "add wings, add legs, add head" etc. So in the end, a blueprint
        is nothing more than either a collection of other blueprints, or a
        single drawing. Perhaps it can be level based, so when you reach a
        certain level, you have access to more blueprints (advances could be
         wheels, humans, planes etc).
    - The blueprints are basically a set of papers the user will have to draw
        one by one, that will automatically be assembled into an organism.
    - For each organism, you will need to specify what it eats, how big it
        is, and how fast it movesi (even for grass / flowers). Based on this, we
        can calculate how much it needs to eat every day.
        Additionally, he can give the
        species a personallity, like hostile - friendly, introvert - extrovert,
        curious - layedback.
    - It is therefore important that the world contains enough food for an
        organism to survive. And here lies the point of the game; to create
        a balanced eco system that the player can continue to grow. Based
        on his own drawings and organisms.
    - Its important that not all species can e.g just eat grass. At a certain
        size, perhaps its required to eat other animals. That way, the game
        ensures that you need to start with smaller species before you can
        create bigger ones.
    - In practice, the player will se that species die and rotten if the
        food supply runs out. He should consider adding animals that eats
        cadavers to not let them lie around for too long.
    - An organism will belong to the teretory (type) where the player
        creates it. A property can decide to which degree is wanderers
        from this location / type.
    - At this point, not sure if random mixing of organisms, or evolution,
        should be a part of the game. Perhaps this could be non-creative
        mode, that (vicious) permutations occur that will eat too much
        food of its kind, unbalancing the ecosystem. 

Game v.2.1
    - Base organisms only need sunlight and water. This is always satisfied.
        - Such organisms can never move on their own. But they will
            spread. How fast they spread depends on the size. Any organism
            can in theory either spread by air, water, dropping or
            help from other organisms. But perhaps this should be hidden
            to not make things too complex.
        - Base organism will belong to either land, water or air. Evolution
            / level up can change or add more habitats later.
        - Water should e.g contain plankton/algae before the player
            can create worms that eat them. Before he creates fish that eat the
            worms.
        - Note that a fish can only be created by evolving e.g a worm. When a fish
            gets bigger, it will need more food, and typically eat other organisms.
            So in order for the eco system to grow, several organisms must evolve
            in parallell.
        - Canibalism is allowed, and can create interresting scenarios.
        - The size of an organism will impact how fast it can reproduce / spread.
            The larger the organism, the slower. Better access to food can
            speed up the process, so it becomes a relative ratio.
        - The game could start with letter you create small species, perhaps
            worms and beetles. He can create as many variants / permutations he wants
            from an already made organism. As soon as one line of permution reach a
            certain population, the player can choose to advance it (evolution). E.g
            make it bigger, add another body part, make it smarter, change food
            dependecies. Each organism will have its own evolution level and evolution
            tree. In the end, really high level organisms can be more abstract things
            like robots, cars, UFOs etc. And they still follow the same rules when
            it comes to hunt and eat etc.
         - To be able to ride an organism, the organism must have passed a certain
            brain level (the player must upgrade it several times). At the same time,
            the organism must be larger than the player / avatar. If the avatar is
            bigger, the organism will try to move, but will be uncontrollable.
         - The reason why riding organisms is good, is that this will make the player
            move quicker around looking for misformed / evil permutations.

Technical
---------------
    - lodding: it makes sense to use more vertices for a model if it results in less
        fragments being drawn when an object is near. The amount of fragments "skipped" will
        be large compared to the number of extra vertices to calulate. But when the object
        is far away, it might be different. Since then, the number of fragments drawn on screen
        will anyway be quite small. So then its perhaps better to reduce the number of vertices
        and "overdraw" fragments instead?
        Because of this, deciding whether or not to switch to lod1 should depend on how many
        vertices lod0 contains. If it contains e.g less than 50 (or less than lod0), it
        will most likely don't give any speed-up.

    - for Z faces, ensure we create one large rect instead of one rect per line

    - remove clamp rect. Instead, store voxel coordinate (atlas pixel pos) in each vertex.
        - When collapsing vertices, check both vertex position and voxel position. This will
            ensure that vertices that are in between two voxels will map to only one of them.
        - Assign voxel pos to f2s variable. This will then interpolate between the vertices
            and automatically create a clamp rect.
    - far lod: draw quad with six vertices with small bend
        - fake depth shade in fragment shader, but only
            as much so there are no glitches.
        - If easily possible, try fill in the corner gaps.
    - Check if I can apply gradient only if the result is going in the same direction
        as lightning, and skip otherwise
    - Calculate effective size for objects, and limit shading range to it.
    - Collapse two adjacent cubes along y-axis in a single object into one.
    - In each cube, for each vertex on either bottom left or top right, add
        a color number telling in which direction opaque pixels can be found in
        all directions around the cube. A color value should be either -1 or 1.
        Other "unused" vertices uses the number 0. When a triangle is interpolated, only
        the dominant corner will be used, and I should be able to read out if a
        color value is above or below 0.

    - send pixel from both scripts. Send uvZ from both scripts. Then they should produce the
        same data.
    - Figure out why uv clamping based on pixel is not accurate.
    - See if I can calculate normals in VC script the same way as in VQ script

    - Copy atlas to Color32
    - Change simplified to create several faces when not using volume

OPTIMIZATIONS
-------------
    - Copy atlas to Color32
    - Tranform vertices directly when creating mesh, instead of when combining them
    - Preallocate memory for mesh factory
    - Preallocate one big chunk of memory, and give it to factory when creating mesh.
        Use this to combine meshes directly in factory instead of creating many meshes
        and cominding them in the end. This the factory is static, this allocation could
        be done only once, at startup.
    - build meshes in separate thread.
    - For volume mesh, draw horisontal/vertical quads as minimal as possible (not always 0->subImageWidth)

LANDSCAPE
------------
    - Generate island instead of infinite landscape
        - I want a closed eco system
        - I want to keep track of individual organisms

    - Create a 2d array (worldmap) containing all squares on the map. Each square
        will be a struct describing height and type, and the organisms it
        contains. And for sure more info later. 
    - Then populate the worldmap with landscape type. Start with types that are
        less inclinded to adapt to its surroundings. Subsequent types need to
        analyze the current worldmap when adding its own layer.
    - Start with land and sea, this will make out the shape of the island. The
        land should be completly flat at this point. Other layers will add in
        heights.
    - Add a mountain range. I don't want mountains to dominate, so a single
        mountain should be enough. Perhaps use fractals instead of perlin here.
    - Add hills to the landscape. Hills can not overwrite moutains, but otherwise
        they will make out the base heights through out the land. Try to change
        the scale dynamically, so that some hills will be long and flat, while
        others will be more bumpy.
    - Add lakes. A Lake will need to stay within the base height of the hill
        sourrounding it. So find a spot, analyze it, and fill it with
        water (alternatively, let everything below a height of 0 be lake).
    - Add rivers. Only rivers that end up intersecting with a lake will be used.
        Lakes can only flow downwards or straight, so it takes some analyzing.

    2.
    - A layer will consist of two samples; frequency and detail.
        - Frequency will specify where in the world the layer will draw.
            This will typically be a highly scaled perlin where we
            we only accept high values (close to 1) as being an acceptable.
            This should scatter the layer out on case we only want to
            rarily draw the layer, like for mountains.
        - The second will detail the contents of the individual islands
            from the first sample. This sample will use a more low scaled
            perlin that add in detail, like mountain tops etc.
        - Just be looking the final result of the sampling we know if the
            layer covers a specic position or not. If it covers it, we can
            go on finding the height. The height should be a merge of all
            the layer samples, so that in the end, the layer fades out
            at the edge of the frequency sample.
        - Note that using two sampled / octaves will produce layer islands
            that are smooth and rounded. One could add more samples to
            break it up even more. One could also use only the first two
            samples to determine the height, while use more samples to
            determine the type (in case of subtypes).
        - If it turns out that the layer does not cover a position, we continue
            with the next layer in the priority chain. This also means that
            the next layer in the chain will never be able to overwrite the
            layers before it.
        - TODO: create a gameoject "LandscapeLayer" that encompasses the above
            with sliders etc. And then a parent gameobject that can contain
            many such layers, with the first child having the highest priority.
            The parent can also have a scale that all the child layers listen
            to, to make it easy to scale things as a whole.

    
